<!DOCTYPE html>
<html>
  <head>
    <title>KennelClass</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.mobile-1.4.3.min.css">
    <link rel="stylesheet" href="/styles/kennel.css">
    <!--STYLES END-->
  </head>

  <body>
 <div data-role="header">
	    <div data-role="controlgroup" data-type="horizontal" class="ui-mini ui-btn-right">
		<a href="/fichas" onClick="borraID();"  class="ui-btn ui-btn-icon-left ui-icon-plus" title="Nueva Ficha">Ficha</a>
	    </div>
	    <img src="/images/logo.png" class="ui-btn-left" style="height: 2.8em" />
	    <h6>Inicio</h6>
    </div>	
    <%- body %>

<div data-role="popup" id="cita" data-theme="a" data-overlay-theme="b" class="ui-content" style="max-width:340px; padding-bottom:2em;">
                <h3>Dar cita</h3>
                                <fieldset class="ui-grid-a">
                                        <div class="ui-block-a">
                                                <div style="width:100%" id="ui-field-contain">
                                                        <label for="fecha-servicio">Fecha:</label>
                                                       <input id="fecha-servicio"  name="fecha-servicio"  type="date">
                                                       <!--  <input name="fecha-servicio" data-role="date" type="text"> -->
                                                </div>
                                        </div>
                                        <div class="ui-block-b">
                                                <div style="width:100%" id="ui-field-contain">
                                                        <label for="input-hora">Hora:</label>
                                                        <input name="input-hora" id="input-hora" value="09:00" type="time">
                                                </div>
                                        </div>
                                </fieldset>
                        <fieldset class="ui-grid-a">
                                <div class="ui-block-a">
                                        <div style="width:90%" id="ui-field-contain">
                                                <label for="textarea-servicio">Servicio:</label>
                                                <textarea rows="9" name="textarea-servicio" id="textarea-servicio"></textarea>
                                        </div>
                                </div>
                                <div class="ui-block-b">
                                        <div style="width:50%" id="ui-field-contain">
                                                <label for="textinput-precio">Precio:</label>
                                                <input data-clear-btn="true"  name="textinput-precio" id="textinput-precio" placeholder="" value="" type="number">
                                        </div>
                                </div>
                        </fieldset>
                <a href="index.html" onClick="saveServicio('');"  data-rel="back" class="ui-shadow ui-btn ui-corner-all  ui-icon-check ui-btn-icon-left ui-btn-inline ui-mini">Guardar</a>
                <a href="index.html" data-rel="back" class="ui-shadow ui-btn ui-corner-all ui-icon-delete ui-btn-icon-left  ui-btn-inline ui-mini">Cancelar</a>

        </div>
	<div data-role="popup" id="guardar-popup" class="ui-content" data-theme="a">
	</div>



<div data-role="footer" data-position="fixed" data-tap-toggle="false">
	<div data-role="controlgroup" data-type="horizontal" class="ui-mini ui-btn-left">
		<a href="/" onclick="limpiarLista();"  class="ui-btn ui-btn-icon-left ui-icon-home">Inicio</a>
	</div>
	<div data-role="controlgroup" data-type="horizontal" class="ui-mini ui-btn-right">
		<a href="/fichas" onClick="borraID();"  class="ui-btn ui-btn-icon-left ui-icon-plus" title="Nueva Ficha">Ficha</a>
	</div>
            <h6>Kennel Class</h6>
        <!--    <div  data-role="controlgroup" data-type="horizontal" class="ui-mini ui-btn-right">
                    <a href="/" onclick=save(); class="ui-btn ui-btn-icon-left ui-icon-check">Guardar</a>
                    <a href="/" class="ui-btn ui-btn-icon-left ui-icon-delete">Cancelar</a>
                    <a onclick=micosa(); class="ui-btn ui-btn-icon-left ui-icon-check">Guardar</a> 

	    </div>  -->
</div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/jquery-1.11.1.min.js"></script>
    <script src="/js/jquery.mobile-1.4.3.min.js"></script>
    <script src="/js/kennelclass.js"></script>
    <script src="/js/util.js"></script>
    <script src="/js/webcam.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
